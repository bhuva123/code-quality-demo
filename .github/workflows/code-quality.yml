name: PMD and SpotBugs Lint POC

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  security-events: write

jobs:
  pmd_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PMD
        run: |
          sudo apt-get update && sudo apt-get install unzip -y
          curl -L https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip -o pmd.zip
          unzip -o pmd.zip -d pmd-extracted
          echo "PMD_BIN_DIR=$(pwd)/pmd-extracted/pmd-bin-6.55.0/bin" >> $GITHUB_ENV

      - name: Run PMD and generate JSON
        continue-on-error: true
        run: |
          mkdir -p src || true
          bash $PMD_BIN_DIR/run.sh pmd \
            -d src \
            -f json \
            -R rulesets/java/quickstart.xml \
            --cache .pmdCache > pmd-report.json || true
          [ -s pmd-report.json ] || echo '[]' > pmd-report.json

      - name: Convert PMD JSON to SARIF
        run: |
          cat > create_sarif.py << 'EOL'
          #!/usr/bin/env python3
          import json
          import sys
          import os

          try:
              # Check if the file exists and has content
              if os.path.exists("pmd-report.json") and os.path.getsize("pmd-report.json") > 0:
                  with open("pmd-report.json") as f:
                      try:
                          data = json.load(f)
                      except json.JSONDecodeError:
                          data = []
              else:
                  data = []
          
              # Initialize SARIF structure
              sarif = {
                  "version": "2.1.0",
                  "runs": [
                      {
                          "tool": {
                              "driver": {
                                  "name": "PMD",
                                  "rules": []
                              }
                          },
                          "results": []
                      }
                  ]
              }
          
              # Process PMD results
              rules_dict = {}
          
              if isinstance(data, list):
                  for item in data:
                      if "violations" in item:
                          for v in item.get("violations", []):
                              rule_id = v.get("rule", "unknown-rule")
                              if rule_id not in rules_dict:
                                  rules_dict[rule_id] = {
                                      "id": rule_id,
                                      "shortDescription": {
                                          "text": rule_id
                                      }
                                  }
          
                              sarif["runs"][0]["results"].append({
                                  "ruleId": rule_id,
                                  "level": "warning",
                                  "message": {
                                      "text": v.get("description", "")
                                  },
                                  "locations": [
                                      {
                                          "physicalLocation": {
                                              "artifactLocation": {
                                                  "uri": item.get("filename", "")
                                              },
                                              "region": {
                                                  "startLine": v.get("beginline", 1)
                                              }
                                          }
                                      }
                                  ]
                              })
              elif isinstance(data, dict) and "files" in data:
                  for f in data.get("files", []):
                      for v in f.get("violations", []):
                          rule_id = v.get("rule", "unknown-rule")
                          if rule_id not in rules_dict:
                              rules_dict[rule_id] = {
                                  "id": rule_id,
                                  "shortDescription": {
                                      "text": rule_id
                                  }
                              }
          
                          sarif["runs"][0]["results"].append({
                              "ruleId": rule_id,
                              "level": "warning",
                              "message": {
                                  "text": v.get("description", "")
                              },
                              "locations": [
                                  {
                                      "physicalLocation": {
                                          "artifactLocation": {
                                              "uri": f.get("filename", "")
                                          },
                                          "region": {
                                              "startLine": v.get("beginline", 1)
                                          }
                                      }
                                  }
                              ]
                          })
          
              # Add rules to SARIF
              sarif["runs"][0]["tool"]["driver"]["rules"] = list(rules_dict.values())
          
              # Write SARIF file
              with open("pmd-report.sarif", "w") as f:
                  json.dump(sarif, f)
          
              print("Successfully created SARIF file")
          
          except Exception as e:
              print(f"Error creating SARIF file: {e}")
              # Create a minimal valid SARIF file
              with open("pmd-report.sarif", "w") as f:
                  json.dump({
                      "version": "2.1.0",
                      "runs": [
                          {
                              "tool": {
                                  "driver": {
                                      "name": "PMD",
                                      "rules": []
                                  }
                              },
                              "results": []
                          }
                      ]
                  }, f)
          EOL
          python3 create_sarif.py

      - name: Debug SARIF Files
        run: |
          echo "### PMD SARIF Content ###"
          cat pmd-report.sarif | head -20
          echo "..."

      - name: Upload PMD SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif
          category: pmd
