name: PMD and SpotBugs Lint

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  security-events: write

jobs:
  pmd_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PMD
        run: |
          sudo apt-get update && sudo apt-get install unzip -y
          curl -L https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip -o pmd.zip
          unzip -o pmd.zip -d pmd-extracted
          echo "PMD_BIN_DIR=$(pwd)/pmd-extracted/pmd-bin-6.55.0/bin" >> $GITHUB_ENV

      - name: Run PMD and generate JSON
        continue-on-error: true
        run: |
          mkdir -p src || true
          bash $PMD_BIN_DIR/run.sh pmd \
            -d src \
            -f json \
            -R rulesets/java/quickstart.xml \
            --cache .pmdCache > pmd-report.json || true
          [ -s pmd-report.json ] || echo '[]' > pmd-report.json

      - name: Convert PMD JSON to SARIF
        run: |
          cat > create_sarif.py << 'EOL'
          #!/usr/bin/env python3
          import json
          import sys
          import os

          try:
              # Check if the file exists and has content
              if os.path.exists("pmd-report.json") and os.path.getsize("pmd-report.json") > 0:
                  with open("pmd-report.json") as f:
                      try:
                          data = json.load(f)
                      except json.JSONDecodeError:
                          data = []
              else:
                  data = []
          
              # Initialize SARIF structure
              sarif = {
                  "version": "2.1.0",
                  "runs": [
                      {
                          "tool": {
                              "driver": {
                                  "name": "PMD",
                                  "rules": []
                              }
                          },
                          "results": []
                      }
                  ]
              }
          
              # Process PMD results
              rules_dict = {}
          
              if isinstance(data, list):
                  for item in data:
                      if "violations" in item:
                          for v in item.get("violations", []):
                              rule_id = v.get("rule", "unknown-rule")
                              if rule_id not in rules_dict:
                                  rules_dict[rule_id] = {
                                      "id": rule_id,
                                      "shortDescription": {
                                          "text": rule_id
                                      }
                                  }
          
                              sarif["runs"][0]["results"].append({
                                  "ruleId": rule_id,
                                  "level": "warning",
                                  "message": {
                                      "text": v.get("description", "")
                                  },
                                  "locations": [
                                      {
                                          "physicalLocation": {
                                              "artifactLocation": {
                                                  "uri": item.get("filename", "")
                                              },
                                              "region": {
                                                  "startLine": v.get("beginline", 1)
                                              }
                                          }
                                      }
                                  ]
                              })
              elif isinstance(data, dict) and "files" in data:
                  for f in data.get("files", []):
                      for v in f.get("violations", []):
                          rule_id = v.get("rule", "unknown-rule")
                          if rule_id not in rules_dict:
                              rules_dict[rule_id] = {
                                  "id": rule_id,
                                  "shortDescription": {
                                      "text": rule_id
                                  }
                              }
          
                          sarif["runs"][0]["results"].append({
                              "ruleId": rule_id,
                              "level": "warning",
                              "message": {
                                  "text": v.get("description", "")
                              },
                              "locations": [
                                  {
                                      "physicalLocation": {
                                          "artifactLocation": {
                                              "uri": f.get("filename", "")
                                          },
                                          "region": {
                                              "startLine": v.get("beginline", 1)
                                          }
                                      }
                                  }
                              ]
                          })
          
              # Add rules to SARIF
              sarif["runs"][0]["tool"]["driver"]["rules"] = list(rules_dict.values())
          
              # Write SARIF file
              with open("pmd-report.sarif", "w") as f:
                  json.dump(sarif, f)
          
              print("Successfully created SARIF file")
          
          except Exception as e:
              print(f"Error creating SARIF file: {e}")
              # Create a minimal valid SARIF file
              with open("pmd-report.sarif", "w") as f:
                  json.dump({
                      "version": "2.1.0",
                      "runs": [
                          {
                              "tool": {
                                  "driver": {
                                      "name": "PMD",
                                      "rules": []
                                  }
                              },
                              "results": []
                          }
                      ]
                  }, f)
          EOL
          
          python3 create_sarif.py

      - name: Debug SARIF Files
        run: |
          echo "### PMD SARIF Content ###"
          cat pmd-report.sarif | head -20
          echo "..."

      - name: Upload PMD SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif
          category: pmd

  spotbugs_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install SpotBugs and SARIF plugin
        run: |
          curl -L https://github.com/spotbugs/spotbugs/releases/download/4.8.3/spotbugs-4.8.3.tgz -o spotbugs.tgz
          tar -xzf spotbugs.tgz
          mkdir -p spotbugs-4.8.3/plugin
          curl -L https://github.com/spotbugs/spotbugs-sarif/releases/latest/download/spotbugs-sarif.jar -o spotbugs-4.8.3/plugin/spotbugs-sarif.jar

      - name: Compile Java source
        continue-on-error: true
        run: |
          mkdir -p target/classes
          find src -type f -name "*.java" > java_files.txt
          if [ -s java_files.txt ]; then
            javac -d target/classes @java_files.txt
          fi

      - name: Run SpotBugs and generate SARIF
        continue-on-error: true
        run: |
          mkdir -p reports/spotbugs
          chmod +x ./spotbugs-4.8.3/bin/spotbugs
          
          # Create a minimal valid SARIF file as a fallback
          cat > reports/spotbugs/spotbugs.sarif << 'EOL'
          {"version":"2.1.0","runs":[{"tool":{"driver":{"name":"SpotBugs","rules":[]}},"results":[]}]}
          EOL
          
          # Only run SpotBugs if we have class files
          if [ -n "$(find target/classes -name '*.class' 2>/dev/null)" ]; then
            # Run SpotBugs and redirect output to a temporary file
            ./spotbugs-4.8.3/bin/spotbugs \
              -textui \
              -pluginList spotbugs-4.8.3/plugin/spotbugs-sarif.jar \
              -sarif:reports/spotbugs/spotbugs-raw.sarif \
              -effort:max \
              -low \
              target/classes || echo "⚠️ SpotBugs returned non-zero exit"
          
            # Process the SARIF file to ensure compatibility with GitHub
            cat > fix_spotbugs_sarif.py << 'EOL'
            #!/usr/bin/env python3
            import json
            import os
          
            try:
                if os.path.exists("reports/spotbugs/spotbugs-raw.sarif"):
                    with open("reports/spotbugs/spotbugs-raw.sarif", "r") as f:
                        data = json.load(f)
          
                    # Create a new minimal structure
                    sarif = {
                        "version": "2.1.0",
                        "runs": [
                            {
                                "tool": {
                                    "driver": {
                                        "name": "SpotBugs",
                                        "rules": []
                                    }
                                },
                                "results": []
                            }
                        ]
                    }
          
                    # Copy rules and results if they exist
                    if "runs" in data and data["runs"]:
                        for run in data["runs"]:
                            if "tool" in run and "driver" in run["tool"]:
                                driver = run["tool"]["driver"]
                                if "rules" in driver:
                                    # Copy each rule, ensuring it has the minimal required structure
                                    for rule in driver["rules"]:
                                        if "id" in rule:
                                            rule_copy = {
                                                "id": rule["id"],
                                                "shortDescription": rule.get("shortDescription", {"text": rule["id"]})
                                            }
                                            sarif["runs"][0]["tool"]["driver"]["rules"].append(rule_copy)
          
                            if "results" in run:
                                # Copy each result, ensuring it has the minimal required structure
                                for result in run["results"]:
                                    if "ruleId" in result and "locations" in result:
                                        result_copy = {
                                            "ruleId": result["ruleId"],
                                            "level": result.get("level", "warning"),
                                            "message": result.get("message", {"text": ""}),
                                            "locations": result["locations"]
                                        }
                                        sarif["runs"][0]["results"].append(result_copy)
          
                    with open("reports/spotbugs/spotbugs.sarif", "w") as f:
                        json.dump(sarif, f)
            except Exception as e:
                print(f"Error processing SpotBugs SARIF: {e}")
            EOL
          
            python3 fix_spotbugs_sarif.py
          fi

      - name: Debug SARIF Files
        run: |
          echo "### SpotBugs SARIF Content ###"
          cat reports/spotbugs/spotbugs.sarif | head -20
          echo "..."

      - name: Upload SpotBugs SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/spotbugs/spotbugs.sarif
          category: spotbugs