name: PMD Lint with SARIF Summary

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  security-events: write

env:
  PMD_VERSION: "7.12.0"

jobs:
  pmd_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install PMD
        run: |
          sudo apt-get update && sudo apt-get install unzip -y
          PMD_URL="https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-dist-${PMD_VERSION}-bin.zip"
          curl -L "$PMD_URL" -o pmd.zip
          unzip -o pmd.zip -d $HOME
          echo "PMD_BIN=$HOME/pmd-bin-${PMD_VERSION}/bin/pmd" >> $GITHUB_ENV

      - name: Run PMD Static Analysis
        continue-on-error: true
        run: |
          $PMD_BIN check \
            --no-progress \
            -d src \
            -R rulesets/java/quickstart.xml \
            -f json \
            --report-file pmd-report.json
          
          if [ ! -s pmd-report.json ]; then
            echo '{"files": []}' > pmd-report.json
          fi

      - name: Convert PMD JSON to SARIF using Python
        run: |
          python3 -c '
          import json
          
          def convert_pmd_to_sarif(pmd_json_path, sarif_output_path):
              with open(pmd_json_path, "r") as f:
                  pmd_data = json.load(f)
          
              if not pmd_data or "files" not in pmd_data:
                  pmd_data = {"files": []}
          
              sarif_report = {
                  "version": "2.1.0",
                  "runs": [
                      {
                          "tool": {
                              "driver": {
                                  "name": "PMD",
                                  "informationUri": "https://pmd.github.io/",
                                  "rules": []
                              }
                          },
                          "results": [
                              {
                                  "ruleId": violation["rule"],
                                  "message": {"text": violation["description"]},
                                  "locations": [{
                                      "physicalLocation": {
                                          "artifactLocation": {"uri": file["filename"]},
                                          "region": {"startLine": violation["beginline"]}
                                      }
                                  }]
                              } for file in pmd_data["files"] for violation in file.get("violations", [])
                          ]
                      }
                  ]
              }
          
              with open(sarif_output_path, "w") as f:
                  json.dump(sarif_report, f, indent=4)
          
          convert_pmd_to_sarif("pmd-report.json", "pmd-report.sarif")
          '

      - name: Upload SARIF report to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif

      - name: Format PMD output for job summary
        continue-on-error: true
        if: always()
        run: |
          echo "## ðŸ“Œ PMD Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”¹ Linting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Line | Rule | Message |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          
          jq -c '.files[] | .filename as $f | .violations[] | {file: $f, line: .beginline, rule: .rule, message: .description}' pmd-report.json | while read -r line; do
            file=$(echo "$line" | jq -r '.file')
            line_number=$(echo "$line" | jq -r '.line')
            rule=$(echo "$line" | jq -r '.rule')
            message=$(echo "$line" | jq -r '.message' | sed 's/|/\\|/g')
            echo "| $file | $line_number | $rule | $message |" >> $GITHUB_STEP_SUMMARY
          done
