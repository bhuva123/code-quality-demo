name: PMD and SpotBugs Lint

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  security-events: write

jobs:
  pmd_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PMD
        run: |
          sudo apt-get update && sudo apt-get install unzip -y
          curl -L https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip -o pmd.zip
          unzip -o pmd.zip -d pmd-extracted
          echo "PMD_BIN_DIR=$(pwd)/pmd-extracted/pmd-bin-6.55.0/bin" >> $GITHUB_ENV

      - name: Run PMD and generate JSON
        continue-on-error: true
        run: |
          mkdir -p src || true
          bash $PMD_BIN_DIR/run.sh pmd \
            -d src \
            -f json \
            -R rulesets/java/quickstart.xml \
            --cache .pmdCache > pmd-report.json || true
          [ -s pmd-report.json ] || echo '[]' > pmd-report.json

      - name: Convert PMD JSON to SARIF
        run: |
          python3 - <<EOF
          import json
          import os
          
          # Check if the file exists and has content
          if os.path.exists("pmd-report.json") and os.path.getsize("pmd-report.json") > 0:
              with open("pmd-report.json") as f:
                  try:
                      data = json.load(f)
                  except json.JSONDecodeError:
                      # Handle invalid JSON
                      data = []
          else:
              data = []
          
          # Prepare an empty rule set to populate
          rules_set = set()
          results = []
          
          # Handle both array and object format of PMD output
          if isinstance(data, list):
              # Handle array format
              for item in data:
                  if "violations" in item:
                      for violation in item.get("violations", []):
                          rules_set.add(violation.get("rule", ""))
                          results.append({
                              "ruleId": violation.get("rule", ""),
                              "message": {"text": violation.get("description", "")},
                              "locations": [{
                                  "physicalLocation": {
                                      "artifactLocation": {"uri": item.get("filename", "")},
                                      "region": {"startLine": violation.get("beginline", 1)}
                                  }
                              }]
                          })
          elif isinstance(data, dict) and "files" in data:
              # Handle object format
              for f in data.get("files", []):
                  for v in f.get("violations", []):
                      rules_set.add(v.get("rule", ""))
                      results.append({
                          "ruleId": v.get("rule", ""),
                          "message": {"text": v.get("description", "")},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {"uri": f.get("filename", "")},
                                  "region": {"startLine": v.get("beginline", 1)}
                              }
                          }]
                      })
          
          # Create rules array from the set
          rules = [{"id": rule, "shortDescription": {"text": rule}} for rule in rules_set if rule]
          
          sarif = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "PMD",
                          "informationUri": "https://pmd.github.io/",
                          "rules": rules
                      }
                  },
                  "results": results
              }]
          }
          
          with open("pmd-report.sarif", "w") as f:
              json.dump(sarif, f, indent=2)
          EOF

      - name: Upload PMD SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif
          category: pmd

  spotbugs_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install SpotBugs and SARIF plugin
        run: |
          curl -L https://github.com/spotbugs/spotbugs/releases/download/4.8.3/spotbugs-4.8.3.tgz -o spotbugs.tgz
          tar -xzf spotbugs.tgz
          mkdir -p spotbugs-4.8.3/plugin
          curl -L https://github.com/spotbugs/spotbugs-sarif/releases/latest/download/spotbugs-sarif.jar -o spotbugs-4.8.3/plugin/spotbugs-sarif.jar

      - name: Compile Java source
        continue-on-error: true
        run: |
          mkdir -p target/classes
          find src -type f -name "*.java" > java_files.txt
          if [ -s java_files.txt ]; then
            javac -d target/classes @java_files.txt
          fi

      - name: Run SpotBugs and generate SARIF
        continue-on-error: true
        run: |
          mkdir -p reports/spotbugs
          chmod +x ./spotbugs-4.8.3/bin/spotbugs
          
          # Check if target/classes contains any .class files
          if [ -n "$(find target/classes -name '*.class' 2>/dev/null)" ]; then
            ./spotbugs-4.8.3/bin/spotbugs \
              -textui \
              -pluginList spotbugs-4.8.3/plugin/spotbugs-sarif.jar \
              -sarif:reports/spotbugs/spotbugs.sarif \
              -effort:max \
              -low \
              target/classes || echo "⚠️ SpotBugs returned non-zero exit"
          else
            echo "No class files found to analyze"
            echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "SpotBugs"}}, "results": []}]}' > reports/spotbugs/spotbugs.sarif
          fi

          # Ensure SARIF file exists
          if [ ! -f reports/spotbugs/spotbugs.sarif ]; then
            echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "SpotBugs"}}, "results": []}]}' > reports/spotbugs/spotbugs.sarif
          fi

      - name: Upload SpotBugs SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/spotbugs/spotbugs.sarif
          category: spotbugs