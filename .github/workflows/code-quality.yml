name: PMD and SpotBugs Lint with Unified Summary

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  security-events: write

env:
  PMD_VERSION: "7.12.0"

jobs:
  pmd_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore PMD from cache
        id: cache-pmd
        uses: actions/cache@v3
        with:
          path: ~/.pmd/pmd-bin-${{ env.PMD_VERSION }}
          key: pmd-${{ env.PMD_VERSION }}-${{ runner.os }}

      - name: Install PMD (if not cached)
        if: steps.cache-pmd.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.pmd
          PMD_URL="https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-dist-${PMD_VERSION}-bin.zip"
          curl -L "$PMD_URL" -o ~/.pmd/pmd.zip
          unzip -o ~/.pmd/pmd.zip -d ~/.pmd
          chmod +x ~/.pmd/pmd-bin-${PMD_VERSION}/bin/pmd

      - name: Set PMD binary path
        run: echo "PMD_BIN=$HOME/.pmd/pmd-bin-${PMD_VERSION}/bin/pmd" >> $GITHUB_ENV

      - name: Run PMD Static Analysis
        continue-on-error: true
        run: |
          $PMD_BIN check \
            --no-progress \
            -d src \
            -R rulesets/java/quickstart.xml \
            -f json \
            --report-file pmd-report.json

          if [ ! -s pmd-report.json ]; then
            echo '{"files": []}' > pmd-report.json
          fi

      - name: Build Project for SpotBugs
        run: mvn clean compile -DskipTests

      - name: Run SpotBugs with SARIF Output
        continue-on-error: true
        run: |
          mkdir -p spotbugs-output
          curl -L https://repo1.maven.org/maven2/com/github/spotbugs/spotbugs/4.8.3/spotbugs-4.8.3.zip -o spotbugs.zip
          unzip -o spotbugs.zip -d spotbugs-dist
          chmod +x spotbugs-dist/spotbugs-4.8.3/bin/spotbugs

          spotbugs-dist/spotbugs-4.8.3/bin/spotbugs \
            -textui \
            -sarif \
            -output spotbugs-output/spotbugs.sarif \
            target/classes

      - name: Combine SARIF Reports
        run: |
          python3 -c '
          import json
          def load(path): return json.load(open(path)) if os.path.exists(path) else {"runs": []}
          import os
          pmd = load("pmd-report.sarif")
          spotbugs = load("spotbugs-output/spotbugs.sarif")
          combined = {"version": "2.1.0", "runs": pmd.get("runs", []) + spotbugs.get("runs", [])}
          with open("combined.sarif", "w") as f: json.dump(combined, f, indent=2)
          '

      - name: Upload Combined SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: combined.sarif

      - name: Unified Summary for PMD + SpotBugs
        continue-on-error: true
        if: always()
        run: |
          echo "## ðŸ§ª Code Quality Report (PMD + SpotBugs)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | File | Line | Rule | Message |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          # PMD
          jq -c '.files[] | .filename as $f | .violations[] | {tool: "PMD", file: $f, line: .beginline, rule: .rule, message: .description}' pmd-report.json | while read -r line; do
            file=$(echo "$line" | jq -r '.file')
            line_number=$(echo "$line" | jq -r '.line')
            rule=$(echo "$line" | jq -r '.rule')
            message=$(echo "$line" | jq -r '.message' | sed 's/|/\\|/g')
            echo "| PMD | $file | $line_number | $rule | $message |" >> $GITHUB_STEP_SUMMARY
          done

          # SpotBugs
          if [ -f spotbugs-output/spotbugs.sarif ]; then
            jq -c '.runs[].results[] | {tool: "SpotBugs", file: .locations[0].physicalLocation.artifactLocation.uri, line: .locations[0].physicalLocation.region.startLine, rule: .ruleId, message: .message.text}' spotbugs-output/spotbugs.sarif | while read -r line; do
              file=$(echo "$line" | jq -r '.file')
              line_number=$(echo "$line" | jq -r '.line')
              rule=$(echo "$line" | jq -r '.rule')
              message=$(echo "$line" | jq -r '.message' | sed 's/|/\\|/g')
              echo "| SpotBugs | $file | $line_number | $rule | $message |" >> $GITHUB_STEP_SUMMARY
            done
          fi
