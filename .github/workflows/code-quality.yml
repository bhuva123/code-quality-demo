name: PMD and SpotBugs Lint

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  security-events: write

jobs:
  pmd_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PMD
        run: |
          sudo apt-get update && sudo apt-get install unzip -y
          curl -L https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.42.0/pmd-bin-6.42.0.zip -o pmd.zip
          unzip -o pmd.zip -d pmd-extracted
          echo "PMD_BIN_DIR=$(pwd)/pmd-extracted/pmd-bin-6.42.0/bin" >> $GITHUB_ENV

      - name: Run PMD and generate JSON
        continue-on-error: true
        run: |
          mkdir -p src || true  # Create src directory if it doesn't exist
          bash $PMD_BIN_DIR/run.sh pmd \
            -d src \
            -f json \
            -R rulesets/java/quickstart.xml \
            --cache .pmdCache > pmd-report.json || true
          [ -s pmd-report.json ] || echo '{"files": []}' > pmd-report.json

      - name: Convert PMD JSON to SARIF
        run: |
          python3 - <<EOF
          import json
          with open("pmd-report.json") as f: data = json.load(f)
          sarif = {
              "version": "2.1.0",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "PMD",
                          "informationUri": "https://pmd.github.io/",
                          "rules": []
                      }
                  },
                  "results": [
                      {
                          "ruleId": v["rule"],
                          "message": {"text": v["description"]},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {"uri": f["filename"]},
                                  "region": {"startLine": v["beginline"]}
                              }
                          }]
                      } for f in data.get("files", []) for v in f.get("violations", [])
                  ]
              }]
          }
          with open("pmd-report.sarif", "w") as f: json.dump(sarif, f, indent=2)
          EOF

      - name: Upload PMD SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif
          category: pmd

      - name: Show PMD Summary
        if: always()
        continue-on-error: true
        run: |
          echo "## 📌 PMD Issues" >> $GITHUB_STEP_SUMMARY
          echo "| File | Line | Rule | Message |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          if [ -s pmd-report.json ]; then
            jq -c '.files[] | .filename as $f | .violations[] | {file: $f, line: .beginline, rule: .rule, message: .description}' pmd-report.json | while read -r line; do
              file=$(echo "$line" | jq -r '.file')
              line_num=$(echo "$line" | jq -r '.line')
              rule=$(echo "$line" | jq -r '.rule')
              msg=$(echo "$line" | jq -r '.message' | sed 's/|/\\|/g')
              echo "| $file | $line_num | $rule | $msg |" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "| - | - | - | No issues found |" >> $GITHUB_STEP_SUMMARY
          fi

  spotbugs_lint:
    runs-on: ubuntu-latest
    # Removed dependency on pmd_lint to allow parallel execution

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install SpotBugs
        run: |
          curl -L https://github.com/spotbugs/spotbugs/releases/download/4.8.3/spotbugs-4.8.3.tgz -o spotbugs.tgz
          tar -xzf spotbugs.tgz

      # Create src directory if it doesn't exist
      - name: Ensure source directories exist
        run: |
          mkdir -p src/main/java
          mkdir -p src/test/java
          mkdir -p target/classes

      - name: Add Java file with known issue (test)
        run: |
          mkdir -p src/test/java/test
          cat <<EOF > src/test/java/test/DeadStoreExample.java
          package test;

          public class DeadStoreExample {
              public static void main(String[] args) {
                  int x = 42; // dead store
                  System.out.println("Hello");
              }
          }
          EOF

      - name: Compile Java source
        continue-on-error: true
        run: |
          find src -type f -name "*.java" > java_files.txt
          if [ -s java_files.txt ]; then
            javac -d target/classes $(cat java_files.txt)
          else
            echo "No Java files found to compile"
          fi

      - name: "Debug - List compiled class files"
        run: |
          echo "📦 Compiled classes:"
          find target/classes -name "*.class" || echo "No class files found"

      - name: Run SpotBugs and generate SARIF
        continue-on-error: true
        run: |
          mkdir -p reports/spotbugs
          
          if [ -n "$(find target/classes -name '*.class' 2>/dev/null)" ]; then
            chmod +x ./spotbugs-4.8.3/bin/spotbugs
          
            # Run SpotBugs and capture the output
            ./spotbugs-4.8.3/bin/spotbugs \
              -textui \
              -sarif:reports/spotbugs/spotbugs.sarif \
              -effort:max \
              -low \
              target/classes || echo "⚠️ SpotBugs returned non-zero exit"
          
            # Check if SARIF file exists and has valid content
            if [ -f reports/spotbugs/spotbugs.sarif ]; then
              # Ensure SARIF output is not combined with console output
              # Sometimes SpotBugs adds additional text to the SARIF file
              grep -q "\"version\":\"2.1.0\"" reports/spotbugs/spotbugs.sarif
              if [ $? -eq 0 ]; then
                # Clean up any text after the JSON content
                sed -i -E 's/\}\]\}\}.*/}]}/' reports/spotbugs/spotbugs.sarif
                # Check JSON validity
                jq '.' reports/spotbugs/spotbugs.sarif > /dev/null 2>&1 || {
                  echo "Invalid JSON in SARIF file, recreating..."
                  echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "SpotBugs"}}, "results": []}]}' > reports/spotbugs/spotbugs.sarif
                }
              else
                echo "SARIF file doesn't contain valid JSON, creating new one"
                echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "SpotBugs"}}, "results": []}]}' > reports/spotbugs/spotbugs.sarif
              fi
            else
              echo "No SARIF file generated, creating new one"
              echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "SpotBugs"}}, "results": []}]}' > reports/spotbugs/spotbugs.sarif
            fi
          else
            echo "No class files found - creating empty SARIF report"
            echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "SpotBugs"}}, "results": []}]}' > reports/spotbugs/spotbugs.sarif
          fi

          # Debug: Show SARIF content
          echo "📄 SpotBugs SARIF content:"
          cat reports/spotbugs/spotbugs.sarif

      - name: Create SpotBugs summary
        if: always()
        continue-on-error: true
        run: |
          echo "## 🐞 SpotBugs Issues" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "reports/spotbugs/spotbugs.sarif" ]; then
            # First, ensure the SARIF file is valid JSON
            jq '.' reports/spotbugs/spotbugs.sarif > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "⚠️ Invalid JSON in SARIF file" >> $GITHUB_STEP_SUMMARY
              echo "No issues could be parsed" >> $GITHUB_STEP_SUMMARY
            else
              # Now safely count the issues
              issues_count=$(jq '.runs[0].results | length // 0' reports/spotbugs/spotbugs.sarif)
          
              if [ "$issues_count" -gt 0 ]; then
                echo "Found $issues_count issues" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "| File | Line | Severity | Issue |" >> $GITHUB_STEP_SUMMARY
                echo "|------|------|----------|-------|" >> $GITHUB_STEP_SUMMARY
          
                jq -c '.runs[0].results[] | {
                  uri: .locations[0].physicalLocation.artifactLocation.uri, 
                  line: .locations[0].physicalLocation.region.startLine, 
                  level: .level,
                  rule: .ruleId,
                  message: .message.text
                }' reports/spotbugs/spotbugs.sarif | \
                while read -r issue; do
                  file=$(echo "$issue" | jq -r '.uri // "-"')
                  line=$(echo "$issue" | jq -r '.line // "-"')
                  level=$(echo "$issue" | jq -r '.level // "note"')
                  rule=$(echo "$issue" | jq -r '.rule // "-"')
                  msg=$(echo "$issue" | jq -r '.message // "-"' | sed 's/|/\\|/g')
          
                  # Format severity with appropriate icon
                  case "$level" in
                    "error")
                      severity="🔴 Error"
                      ;;
                    "warning")
                      severity="🟠 Warning"
                      ;;
                    *)
                      severity="🔵 Note"
                      ;;
                  esac
          
                  echo "| $file | $line | $severity | [$rule] $msg |" >> $GITHUB_STEP_SUMMARY
                done
              else
                echo "No issues found" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "No SpotBugs report generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload SpotBugs SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/spotbugs/spotbugs.sarif
          category: spotbugs